0-1 Knapsack

public class Solution {
    public int solve(int i,ArrayList<Integer> A, ArrayList<Integer> B,int c,int dp[][]){
        if(i==0 || c==0){
            return 0;
        }
        if(dp[i][c]!=-1 ){return dp[i][c];}
        if(B.get(i-1)<=c){
          int pick = A.get(i-1)+solve(i-1,A,B,c-B.get(i-1),dp);  
          int NotPick = solve(i-1,A,B,c,dp); 
            dp[i][c] = Math.max(pick,NotPick);
        }else{
            dp[i][c] = solve(i-1,A,B,c,dp);
        }
        return dp[i][c];
    }
    public int solve(ArrayList<Integer> A, ArrayList<Integer> B, int C) {
        int i = A.size();
        
        int dp[][] = new int[i+1][C+1];
        // for(int row[] : dp){
        //    Arrays.fill(row,-1);
        // }
        
        for(int j=0;j<i;j++){
            dp[j][0]=0;
        }
        for(int k=0;k<C;k++){
            dp[0][k]=0;
        }
        
        for(int a=1;a<=i;a++){
            for(int b=1;b<=C;b++){
               
                if(B.get(a-1)<=b){
                   int pick = A.get(a-1)+dp[a-1][b-B.get(a-1)];
                   int notPick = dp[a-1][b];
                    dp[a][b] = Math.max(pick,notPick);
                 }else{
                   dp[a][b]   =  dp[a-1][b];
                 }
        
           } 
        }
         return dp[i][C];    
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------\
2.

-------------------------------------------------------------------------------------------------------------------------------------------
3.knapsack (with duplicates) 

class Solution{
    public static int solve(int i , int W , int val[], int wt[],int memo[][]){
        
        if(i==0){
             return ((int) (W / wt[0])) * val[0];
        }
        if(memo[i][W]!=-1){
            return memo[i][W];
        }
        int notPick = solve(i-1,W,val,wt,memo);
        int pick = Integer.MIN_VALUE;
        if(wt[i]<=W){
            pick = val[i]+solve(i,W-wt[i],val,wt,memo);
        }
        return memo[i][W] = Math.max(pick,notPick);
    }
    static int knapSack(int N, int W, int val[], int wt[])
    {
        // int memo[][] = new int[N][W+1];
        int prev[] = new int[W+1];
        int curr[] = new int[W+1];
        
        // for (int row[] : memo)
        // Arrays.fill(row,-1);
        
        // return solve(N-1,W,val,wt,memo);
        
        for(int w = 0 ; w<=W ; w++){
            prev[w] = ((int) (w / wt[0])) * val[0];
        }
        
        for(int i=1 ;i<N ;i++){
            for(int w = 0; w<=W ; w++) {
                int notPick = prev[w];
        int pick = 0;
        if(wt[i]<=w){
            pick = val[i]+curr[w-wt[i]];
        }
         curr[w] = Math.max(pick,notPick);
            }
            prev=curr;
        }
        return prev[W];
    }
}

